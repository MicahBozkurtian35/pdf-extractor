import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import threading
import os
import subprocess
import shutil

# Import tkinterdnd2 for drag and drop support
from tkinterdnd2 import DND_FILES, TkinterDnD

# Import the processing function from TestGeneratedGraph.py
from TestGeneratedGraph import process_pdf_to_excel

class PDFtoExcelApp(TkinterDnD.Tk):
    def __init__(self):
        super().__init__()
        self.title("PDF to Excel Graph Data Extractor")
        self.geometry("500x350")
        self.configure(padx=20, pady=20)
        self.pdf_path = None
        self.excel_path = "output2.xlsx"  # Default output filename
        self.create_widgets()

    def create_widgets(self):
        # File selection label and entry
        self.file_label = tk.Label(self, text="Select a PDF file:")
        self.file_label.pack(pady=(0, 5))

        self.file_entry = tk.Entry(self, width=50)
        self.file_entry.pack(pady=(0, 10))

        # Browse button to open file dialog
        self.browse_button = tk.Button(self, text="Browse", command=self.browse_file)
        self.browse_button.pack(pady=(0, 10))

        # Drag-and-drop frame
        self.drop_frame = tk.Frame(self, width=400, height=100, bg="#e0e0e0")
        self.drop_frame.pack(pady=(0, 10))
        self.drop_frame.pack_propagate(False)
        # Register the drop target with tkinterdnd2
        self.drop_frame.drop_target_register(DND_FILES)
        self.drop_frame.dnd_bind("<<Drop>>", self.drop)
        self.drop_label = tk.Label(self.drop_frame, text="Drag and drop PDF file here")
        self.drop_label.pack(expand=True)

        # Convert button to start processing
        self.convert_button = tk.Button(self, text="Convert", command=self.start_conversion)
        self.convert_button.pack(pady=(0, 10))

        # Progress bar
        self.progress = ttk.Progressbar(self, orient="horizontal", length=400, mode="determinate")
        self.progress.pack(pady=(0, 10))

        # Frame for result buttons (Open and Save As)
        self.result_frame = tk.Frame(self)
        self.result_frame.pack(pady=(10, 0))
        self.open_button = tk.Button(self.result_frame, text="Open Excel File", command=self.open_excel, state="disabled")
        self.open_button.pack(side="left", padx=5)
        self.download_button = tk.Button(self.result_frame, text="Save As...", command=self.save_as, state="disabled")
        self.download_button.pack(side="left", padx=5)

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("PDF Files", "*.pdf")])
        if file_path:
            self.set_pdf_path(file_path)

    def drop(self, event):
        # event.data contains the dropped file path(s)
        # It might include curly braces around the path; strip them off.
        file_path = event.data.strip("{}")
        if file_path.lower().endswith(".pdf"):
            self.set_pdf_path(file_path)
        else:
            messagebox.showwarning("Invalid File", "Please drop a PDF file.")

    def set_pdf_path(self, file_path):
        self.pdf_path = file_path
        self.file_entry.delete(0, tk.END)
        self.file_entry.insert(0, file_path)
        print(f"PDF selected: {file_path}")

    def update_progress(self, percent):
        self.progress["value"] = percent
        self.update_idletasks()
        print(f"Progress: {percent:.1f}%")

    def conversion_task(self):
        try:
            process_pdf_to_excel(self.pdf_path, self.excel_path, progress_callback=self.update_progress)
            self.on_conversion_complete()
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    def start_conversion(self):
        if not self.pdf_path or not self.pdf_path.lower().endswith(".pdf"):
            messagebox.showwarning("No PDF Selected", "Please select a valid PDF file.")
            return
        self.convert_button.config(state="disabled")
        self.progress["value"] = 0
        print("Starting conversion...")
        threading.Thread(target=self.conversion_task).start()

    def on_conversion_complete(self):
        print("Conversion complete!")
        self.convert_button.config(state="normal")
        self.open_button.config(state="normal")
        self.download_button.config(state="normal")
        messagebox.showinfo("Done", "Excel file has been created successfully!")

    def open_excel(self):
        try:
            print(f"Opening Excel file: {self.excel_path}")
            if os.name == "nt":
                os.startfile(self.excel_path)
            elif os.name == "posix":
                if subprocess.call(["which", "open"], stdout=subprocess.DEVNULL) == 0:
                    subprocess.call(["open", self.excel_path])
                else:
                    subprocess.call(["xdg-open", self.excel_path])
            else:
                subprocess.call(["xdg-open", self.excel_path])
        except Exception as e:
            messagebox.showerror("Error", f"Unable to open Excel file: {e}")

    def save_as(self):
        save_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel Files", "*.xlsx")],
            title="Save Excel File As"
        )
        if save_path:
            try:
                print(f"Saving Excel file to: {save_path}")
                shutil.copyfile(self.excel_path, save_path)
                messagebox.showinfo("Saved", "Excel file saved successfully!")
                self.excel_path = save_path
            except Exception as e:
                messagebox.showerror("Error", f"Unable to save file: {e}")

if __name__ == "__main__":
    app = PDFtoExcelApp()
    app.mainloop()
